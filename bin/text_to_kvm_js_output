
#!/usr/bin/env zsh

# Maps text from clipboard and pasted the mapped chars with js code to paste in the browser

# Shell part

# Run Ruby code using a here-document
ruby <<'END_RUBY'
# Ruby part
copied_text = `pbpaste`
# text_nospaces = text.gsub(/\s+/, "")
text_to_paste = copied_text
                .gsub(/ +/, " ")

# map ` sign to 你 so it correctly typed to the end machine`
# map $ sign to 好 so it correctly typed to the end machine`
text_to_paste_with_chars_replaced = text_to_paste
                                    .gsub("`", "你")
                                    .gsub("$", "好")
output = <<~HEREDOC
 text = `
 #{text_to_paste_with_chars_replaced}
 `


 SPECIAL_KEY_MAP = {
  // Map this char to special one
  '你': { code: 'Backquote', keyCode: 192, shiftKey: false, mappedChar: '`' },
  '好': { code: 'Digit4', keyCode: 52, shiftKey: true, mappedChar: '$' },
  '~':  { code: 'Backquote', keyCode: 192, shiftKey: true },
  ' ':  { code: 'Space', keyCode: 32, shiftKey: false },
  '\\n': { code: 'Enter', keyCode: 13, shiftKey: false },
  '.':  { code: 'Period', keyCode: 190, shiftKey: false },
  ',':  { code: 'Comma', keyCode: 188, shiftKey: false },
  ';':  { code: 'Semicolon', keyCode: 186, shiftKey: false },
  ':':  { code: 'Semicolon', keyCode: 186, shiftKey: true },
  "'":  { code: 'Quote', keyCode: 222, shiftKey: false },
  '"':  { code: 'Quote', keyCode: 222, shiftKey: true },
  '[':  { code: 'BracketLeft', keyCode: 219, shiftKey: false },
  '{':  { code: 'BracketLeft', keyCode: 219, shiftKey: true },
  ']':  { code: 'BracketRight', keyCode: 221, shiftKey: false },
  '}':  { code: 'BracketRight', keyCode: 221, shiftKey: true },
  '\\\\': { code: 'Backslash', keyCode: 220, shiftKey: false },
  '|':  { code: 'Backslash', keyCode: 220, shiftKey: true },
  '/':  { code: 'Slash', keyCode: 191, shiftKey: false },
  '?':  { code: 'Slash', keyCode: 191, shiftKey: true },
  '`':  { code: 'Backquote', keyCode: 192, shiftKey: false },
  '-':  { code: 'Minus', keyCode: 189, shiftKey: false },
  '_':  { code: 'Minus', keyCode: 189, shiftKey: true },
  '=':  { code: 'Equal', keyCode: 187, shiftKey: false },
  '+':  { code: 'Equal', keyCode: 187, shiftKey: true },
  '!':  { code: 'Digit1', keyCode: 49, shiftKey: true },
  '@':  { code: 'Digit2', keyCode: 50, shiftKey: true },
  '#':  { code: 'Digit3', keyCode: 51, shiftKey: true },
  '$':  { code: 'Digit4', keyCode: 52, shiftKey: true },
  '%':  { code: 'Digit5', keyCode: 53, shiftKey: true },
  '^':  { code: 'Digit6', keyCode: 54, shiftKey: true },
  '&':  { code: 'Digit7', keyCode: 55, shiftKey: true },
  '*':  { code: 'Digit8', keyCode: 56, shiftKey: true },
  '(':  { code: 'Digit9', keyCode: 57, shiftKey: true },
  ')':  { code: 'Digit0', keyCode: 48, shiftKey: true },
  '<':  { code: 'Comma', keyCode: 188, shiftKey: true },
  '>':  { code: 'Period', keyCode: 190, shiftKey: true }
  // Add more if needed
};

function getKeyEventProps(char) {
  // Special characters
  if (SPECIAL_KEY_MAP[char]) {
    const { code, keyCode, shiftKey } = SPECIAL_KEY_MAP[char];
    return { key: char, code, keyCode, charCode: char.charCodeAt(0), shiftKey };
  }

  // Letters
  if (char.match(/[a-zA-Z]/)) {
    const isUpper = char === char.toUpperCase();
    return {
      key: char,
      code: 'Key' + char.toUpperCase(),
      keyCode: char.charCodeAt(0),
      charCode: char.charCodeAt(0),
      shiftKey: isUpper
    };
  }

  // Digits
  if (char.match(/[0-9]/)) {
    return {
      key: char,
      code: 'Digit' + char,
      keyCode: char.charCodeAt(0),
      charCode: char.charCodeAt(0),
      shiftKey: false
    };
  }

  return;

  // Fallback for any other character
  return {
    key: char,
    code: undefined,
    keyCode: char.charCodeAt(0),
    charCode: char.charCodeAt(0),
    shiftKey: false
  };
}



function simulateKeyPress(char) {
  const props = getKeyEventProps(char);
   const downEvent = new KeyboardEvent('keydown', {
    ...props,
    bubbles: true,
    cancelable: true
  });
  const upEvent = new KeyboardEvent('keyup', {
    ...props,
    bubbles: true,
    cancelable: true
  });
  document.dispatchEvent(downEvent);
  document.dispatchEvent(upEvent);
}

async function typeClipboardToKVM() {
  const kvmInput = document.querySelector('#remote-screen');
  if (!kvmInput) {
    console.error('KVM input element not found');
    return;
  }
  kvmInput.focus();

  for (const char of text) {
    simulateKeyPress(char);

    if (!char) {
      continue;
    }

    if (['\\n', '{', '}', ' '].includes(char)) {
      await new Promise(r => setTimeout(r, 80)); // 120ms for newlines
    } else {
      await new Promise(r => setTimeout(r, 35)); // 60ms for other chars
    }
  }
}

typeClipboardToKVM();
HEREDOC
puts  text_to_paste

# paste mapped input to clipboard
IO.popen('pbcopy', 'w') { |pipe| pipe.puts output }


END_RUBY



