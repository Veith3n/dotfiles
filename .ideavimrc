source ~/.vimrc

set surround
set easymotion
" set camelsnek
set cpo

map  / /
oma / /
map  n n
map  N N

let s:save_cpo = &cpo
set cpo&vim

" Library Interface: {{{1
function! camelsnek#camel(text) abort
  let l:parts = split(a:text, '[^A-Za-z0-9]\+')
  " If list is of length 1, it's likely already in CamelCase.
  " Otherwise, if it's less than 1, don't do anything.
  if len(l:parts) == 1
    return toupper(l:parts[0][0]) . l:parts[0][1:]
  elseif len(l:parts) < 1
    return a:text
  endif
  let l:text = join(map(l:parts, 'toupper(v:val[0]) . tolower(v:val[1:])'), '')
  return l:text
endfunction

function! camelsnek#camelback(text) abort
  let l:camel = camelsnek#camel(a:text)
  return tolower(l:camel[0]) . l:camel[1:]
endfunction

function! camelsnek#snek(text) abort
  let l:text = substitute(a:text, '\C\([^A-Za-z0-9]\)', ' ', 'g')
  let l:text = substitute(l:text, '\C\([^a-z]\)\([a-z]\)', ' \1\2', 'g')
  let l:text = substitute(l:text, '\C\([a-z]\)\([^a-z]\)', '\1 \2', 'g')
  let l:text = substitute(l:text, '^\s*\(.*\S\)\s*$', '\1', 'g')
  let l:text = substitute(l:text, '\(\s\+\|-\)', '_', 'g')
  return tolower(l:text)
endfunction

function! camelsnek#kebab(text) abort
  let l:text = camelsnek#snek(a:text)
  let l:text = substitute(l:text, '_', '-', 'g')
  return l:text
endfunction

function! camelsnek#screm(text) abort
  let l:text= camelsnek#snek(a:text)
  return toupper(l:text)
endfunction


" Misc: {{{1
" vim: set ft=vim ts=2 sw=2 tw=78 et fdm=marker:

command! -nargs=0 -range -bar Camel :call <SID>repl(<count>, 'camel')
command! -nargs=0 -range -bar CamelB :call <SID>repl(<count>, 'camelback')
  
command! -nargs=0 -range -bar Kebab :call <SID>repl(<count>, 'kebab')
command! -nargs=0 -range -bar Snek :call <SID>repl(<count>, 'snek')
command! -nargs=0 -range -bar Screm :call <SID>repl(<count>, 'screm')

" vim-camelsnek
" map <Leader>cs :Snek <CR>
map <Leader>cs <SID>repl(<count>, 'snek') <CR>
map <Leader>cc :Camel <CR>
