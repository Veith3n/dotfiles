#!/bin/bash

set -euo pipefail

BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

log() {
  echo "$(date '+%Y-%m-%d %I:%M:%S %p') [INFO] $*"
}

error() {
  echo "$(date '+%Y-%m-%d %I:%M:%S %p') [ERROR] $*" >&2

  exit 1
}

is_mac_os() {
  [[ "$(uname)" == "Darwin" ]]
}

# Function to install brew packages from an array
# Usage: install_packages array_name[@] [install_type]
# array_name[@]: Pass array name with [@] (e.g., "my_packages[@]")
# install_type: "brew" (default) for CLI tools/libraries, "cask" for GUI applications/fonts
# Example: install_packages private_packages[@] "cask"
install_packages() {
  local -a package_array=("${!1}")
  local install_type="${2:-brew}" # Default to regular brew, can be "cask"

  for package in "${package_array[@]}"; do
    log "Installing $package..."

    if [[ "$install_type" == "cask" ]]; then
      # GUI applications and fonts
      if ! brew list --cask "$package" &>/dev/null; then
        brew install --cask "$package" || error "Failed to install $package"
      else
        log "$package already installed"
      fi
    else
      # CLI tools and libraries
      if ! brew list "$package" &>/dev/null; then
        brew install "$package" || error "Failed to install $package"
      else
        log "$package already installed"
      fi
    fi
  done
}

install_package_manager_and_core_system_dependencies() {
  log "Installing package manager and core system dependencies..."

  if is_mac_os; then

    log "Installing Xcode Command Line Tools..."
    xcode-select --install || log "Xcode tools already installed"

    if ! command -v brew &>/dev/null; then
      log " Installing Homebrew..."
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      brew update
      brew upgrade
    else
      log "Homebrew is already installed."
    fi
  else
    error "Unsupported OS. This script currently supports only macOS."
  fi
}

install_package_manager_and_core_system_dependencies

# TODO: wrap brew install in function and handle other systems
# Install homebrew dependencies
brew install fzf    # fuzzy search
brew install direnv # looks for .envrc file in each directory

# Gpg installation and hack for mac os
if is_mac_os; then
  brew install gpg # managing keys
  # Hack for gpg https://stackoverflow.com/questions/39494631/gpg-failed-to-sign-the-data-fatal-failed-to-write-commit-object-git-2-10-0
  brew upgrade gnupg
  brew link --overwrite gnupg
  brew install pinentry-mac
  echo "pinentry-program /usr/local/bin/pinentry-mac" >>~/.gnupg/gpg-agent.conf
  killall gpg-agent
fi

# Install newer version of bash and set it as default shell
# TODO: confirm whether it's still needed
if is_mac_os; then
  brew install bash # install new version of bash
  echo "enter recovery mode and run csrutil disable, restart run set_new_bash_as_default, enter recovery mode again and run csrutil enable"
fi

brew install zsh    # neat CLI
brew install aspell # spell checker
brew install gh     # github cli
brew install jq
brew install ngrok
brew install dotenv-linter
brew install htop

sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" # oh-my-zsh

brew install --cask font-hack-nerd-font

# TODO: find nice terminal for other systems

cask_packages=(
  docker
  slack
  visual-studio-code
  dash
  insomnia
  jetbrains-toolbox
  pgadmin4
  google-cloud-sdk
  gitkraken
  firefox
  brave-browser
)

private_packages=(
  discord
  send-to-kindle
  whatsapp
  signal
  proton-pass
)

install_packages cask_packages[@] "cask"

install_packages private_packages[@] "cask"

# TODO: find copy history program from other systems

brew install nodenv                              # install node_env
brew install nodenv/nodenv/nodenv-package-rehash # rehash after installation of global package or new node version

brew install java # install latest java version

brew install jenv # version manager for java

brew install pyenv # version manager for python

brew install pipenv # dependency manager for python

brew install heroku/brew/heroku # heroku cli

brew install pygments # python package to colorize files

brew install awscli # AWS cli

brew install asdf      # version manager
asdf plugin add neovim # plugin for managing neovim versions

brew install z # simple script for easier navigation in directories https://github.com/rupa/z (alias for cd)

asdf install neovim 0.8.3
asdf global neovim 0.8.3

brew install stow      # linking directories
brew install ripgrep   # file grepping for telescope in neovim
brew install fd        # file grepping for telescope in neovim
brew install diffr     # tool for nicer diffs in git
brew install git-delta # tool for nicer diffs in git

# Mac os related dependencies
if is_mac_os; then
  ./macos/scripts/install_dependencies
fi

# Link config files to the root directory
[ -r .make_links ] && ./make_links

# Generate file with git aliases for zshrc
./bin/generate_git_aliases_for_zshrc

curl -s "https://get.sdkman.io" | bash    # sdkman installation
source "$HOME/.sdkman/bin/sdkman-init.sh" # init sdk man
sdk install java                          # install latest java from sdk man

git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
git clone https://github.com/matthieusb/zsh-sdkman.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-sdkman # autocomplete for sdkman

# Setup necessary entries to the config files
if [ -r ~/.zshrc ]; then
  # initialize direnv in zshrc
  echo $'# direnv initialize\neval "$(direnv hook zsh)"' >>~/.zshrc

  # initialize nodenv in zshrc
  echo $'# nodenv initialize\neval "$(nodenv init - --no-rehash)"' >>~/.zshrc

  # initialize pyenv in zshrc
  echo $'# pyenv initialize\neval "$(pyenv init -)"' >>~/.zshrc

  # initialize jenv in zshrc
  echo 'export PATH="$HOME/.jenv/bin:$PATH"' >>~/.zshrc
  echo 'eval "$(jenv init -)"' >>~/.zshrc

  # initialize z in zshrc
  echo '. $(brew --prefix)/etc/profile.d/z.sh' >>~/.zshrc

  # add git aliases
  sed -i '' -e '/^# Example aliases/a\
[ -r ~/.zsh_git_aliases ] && . ~/.zsh_git_aliases' ~/.zshrc

  # add utils aliases
  sed -i '' -e '/^# Example aliases/a\
[ -r ~/.aliases/.utils ] && . ~/.aliases/.utils' ~/.zshrc

  # enable lookup for aliases
  sed -i '' -e '/^plugins=/a\
\
ZSH_ALIAS_FINDER_AUTOMATIC=true' ~/.zshrc

  # enable option-stacking completion for docker
  sed -i '' -e '/^plugins=/a\
# completion for option-stacking (docker run -it <TAB>)\
zstyle ':completion:*:*:docker:*' option-stacking yes\
zstyle ':completion:*:*:docker-*:*' option-stacking yes\
' ~/.zshrc

  # set zsh plugins
  sed -i '' -e 's/plugins=(git)/plugins=(\
	alias-finder\
	colored-man-pages\
	dash\
	docker\
	encode64\
	extract\
	gh\
	git-auto-fetch\
	asdf\
	heroku\
	jira\
	sprunge # url for text\/files\
	transfer # url for uploading files\
	zsh-sdkman\
	zsh-syntax-highlighting\
)/' ~/.zshrc

  # add github aliases
  sed -i '' -e '/^# Example aliases/a\
[ -r ~/.aliases/.gh_cli ] && . ~/.aliases/.gh_cli' ~/.zshrc

  # Add elpassion scripts
  sed -i '' -e '1i \ 
# Autoload elpassion scripts \
path+=('$BASE_DIR/elpassion' $path) \
\' ~/.zshrc

  # autoload util functions
  sed -i '' -e '1i \ 
# Autoload util functions \
[ -r ~/.functions ] && fpath=($fpath ~/.functions) \
[ -r ~/.functions ] && autoload -Uz ~/.functions/**/* \
\' ~/.zshrc

  # source variables and path files in zshrc
  sed -i '' -e '1i \ 
\
# Link file with paths \
[ -r ~/.env_paths ] && . ~/.env_paths \
# Link file with variables \
[ -r ~/.env_variables ] && . ~/.env_variables \
\' ~/.zshrc

  # source google-cloud-sdk
  sed -i '' -e '/^source $ZSH\/oh-my-zsh.sh/a\
source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc" \
source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc" ' ~/.zshrc

  # Requires oh my zsh
  printf '\n# Enables autocompletion for homebrew\nFPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH' >>~/.zprofile

  echo 'plugins added'
else
  echo '.zshrc config file does not exist'
fi

source ~/.zshrc # reload changes to the config file

# refresh completion suggestion for sdk man (comes from zsh-sdkman plugin)
sdk-refresh-completion-files

# setup hook scripts for installed node versions
nodenv package-hooks install --all

# add newest java version to the jenv path
java_path=$(/usr/libexec/java_home -V)
jenv add $java_path
# add java to jenv from sdk man
ls ~/.sdkman/candidates/java/ | grep -v current | xargs jenv add

# Rvm install
gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB # public key for rvm
curl -sSL https://get.rvm.io | bash -s stable --ruby

gem install rubocop
gem install rubocop-rspec
gem install rubocop-rails

# Authenticate fror github cli
gh auth login

# heroku
heroku autocomplete

./install_npm_dependencies

if is_mac_os; then
  # Iterm
  defaults write com.googlecode.iterm2 "PrefsCustomFolder" -string "$BASE_DIR/iterm" # set config folder
  defaults write com.googlecode.iterm2 "LoadPrefsFromCustomFolder" -bool true        # load config from the folder

  # System settings
  ./macos/scripts/restore_dock_arragment
  ./macos/scripts/set_mac_os_settings

  # enables easier movement in vim mode
  defaults write -g ApplePressAndHoldEnabled -bool false
fi

echo 'Generating custom vim dictionary based on aspell one'
~/.vim/lib/update_vim_dict.sh

echo 'Generating custom neovim dictionary based on aspell one'
generate_neovim_dict.sh
