[user]
	email = 28898861+Veith3n@users.noreply.github.com
	name = Krzysztof Kopydłowski
	signingkey = 72FBDF57E6EEDC9F
[includeIf "gitdir:~/Projects/gitlab-projects/"] # set correct signingKey for gitlab
        path = ~/Projects/gitlab-projects/.gitconfig
[branch]
	autosetuprebase = always
[commit]
	gpgsign = true
[core]
	editor = nvim
	excludesfile = ~/.gitignore
[diff]
	tool = vimdiff
	external = git_diff_wrapper
[difftool]
	prompt = false
[filter "sensitive_data"]
	clean =  .git_scripts/clean_sensitive_data
	smudge = .git_scripts/smudge_sensitive_data
[filter "git_signing_key"]
	clean =  .git_scripts/clean_gitconfig
	smudge = .git_scripts/smudge_gitconfig
; [core]
  ; pager = diffr | less 
  ; pager = delta --color-only
[interactive]
  diffFilter = [[ ! -z "$(git checkIfSystemIsInDarkMode)" ]] && delta --color-only || delta --color-only --light
  ; diffFilter = delta --color-only --light 
  ; diffFilter = diffr | less -R ; a bit less readable diff
[delta]
    side-by-side = true
[pager]
	diff = ; needed for git_diff_wrapper to work
  ; log = diffr | less
  ; show = diffr | less
  ; diff = diffr | less
[merge]
	tool = vimdiff
[mergetool]
	keepBackup = false
[rebase]
	autosquash = true
[rerere]
	enabled = true
[color]
	branch = auto
	diff = auto
	status = auto
[color "diff"]
	meta = yellow
	frag = magenta
	old = red bold
	new = green
	plain = white
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
	branch = red
    #header = green
[alias] 
	el=config --edit
	eg=config --edit --global
	i = init
	rea = "!f() { git remote add origin $1 ; }; f"
	rem = "!f() { git remote rm $1 ; }; f"
	rel = remote -v
	clo = clone

	# utils
	#l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	#l = log --graph --pretty=format:'%C(bold blue)%h%Creset -%C(yellow)%d%Creset %C(bold green)(%cr)%Creset %C(white)%s %C(dim white)<%an>%Creset' --abbrev-commit
	l = "log --color --graph --pretty=format:'%C(#dc322f)%h%C(#b58900)%d %C(#FC5900)%s %C(#dc322f)| %C(#586f75)%cr %C(#dc322f)| %C(#586e75)%an%Creset' --abbrev-commit"
	ln = "!f() { IFS=$'\n'; i=0;commits=$(git l -n 30) ; for commit in ${commits[@]}; do echo $i $commit; ((i++)); done; }; f"
	ls = ! git l --stat
	lsc = ! git ls -p
	la = ! git l --all
	lsa = ! git ls --all
	lsca = ! git lsc --all
	mt = mergetool
	mc = merge --continue
	ma = merge --abort

	bclean = "!f() { git branch --merged ${1-"$(git defaultMainBranch)"} | grep -v ${1-"$(git defaultMainBranch)"} | xargs git branch -d; }; f" # Cleanup merged branches
	prelease = "!f() { git fo && git log origin/${1-production}..origin/"$(git defaultMainBranch)" --oneline --merges --reverse | grep -v "$(git defaultMainBranch)" | grep -v 'remote-tracking' | awk '{$1= \"\"; print \"-\"$0}'; }; f"
	prelease2 = "!f() { git fo && git log origin/${1-"$(git defaultMainBranch)"}..origin/${2-$(git currentBranch)} --oneline --merges --reverse | grep -v "$(git defaultMainBranch)" | grep -v 'remote-tracking' | awk '{$1= \"\"; print \"-\"$0}'; }; f"
	# print merge commits from last 500 commits
	lmcm = "!f() { git fo && git log HEAD~500..origin/$(git currentBranch) --oneline --merges --reverse | grep -v "$(git defaultMainBranch)" | grep -v 'remote-tracking' | awk '{$1= \"\"; print \"-\"$0}'; }; f"
	count = shortlog -sn

	# changes
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"' # Commits came in since last command $ git new HEAD
	d = ! git gfuzm git diff 
	da = diff 
	ds = ! git gfuzs git difftool --cached 
	dc  = "!f() { git diff HEAD~$((${1-0}+1))..HEAD~${1-0}; }; f"
	dcn = "!f() { hash=$(git log --pretty=format:'%h' :/$1 | head -1); git diff $hash~..$hash;}; f"
	dch  = "!f() { git diff $1~..$1; }; f"	
	do = "!f() { git fo && git diff $(git currentBranch) origin/$(git currentBranch); }; f" # diff between local and origin
	dsa = difftool --cached 
	dlc = difftool --cached HEAD~

	# git flow
	f = fetch --all
	fo = fetch origin --prune

	s = status -s
	sc = status -v

	b = ! git branch | fzf --print0 -m | tr -d '[:space:]*' | xargs -0 -t -o git checkout
	bm = "!f() { git checkout "$(git defaultMainBranch)"; }; f"
	bj = "!f() { generate-jira-branch-name $1; }; f"
	bre = "!f() { git branch ${2-$(git currentBranch)} -m $1; }; f"
	brm = "!f() { git branch -D $1; }; f"
	brm = ! git branch | fzf --print0 -m | tr -d '[:space:]*' | xargs -0 -t -o git branch -D
  bprune = ! git branch | xargs git branch -D

	ch = ! git gfuzm git checkout
	chm = "!f() { git checkout "$(git defaultMainBranch)"; }; f"
	chf = "!f() { git checkout $1 "$(git defaultMainBranch)"; }; f"
	chb = git checkout -b
        # checkout branch with dash case name
	chb = "!f() { msg="$*"; name=$(git convertToDashCase $msg); git checkout -b $name; }; f"
	chbo = "!f() { git fo ; git branch -a | grep origin/ | grep -v '\\->' | sed 's/remotes\\/origin\\///' | fzf --print0 -m | tr -d '[:space:]*' | xargs -0 -t -o git checkout; }; f"
	cl = ! git gfuzu git clean 
	cld = ! git gfuzu git clean -f

	a = ! git gfuza git add
	ap = ! git gfuzm git add -p
	aa = add -A
	aap = add -p

	rb = "!f() { git rebase -r ${1-"$(git defaultMainBranch)"}; }; f"
	rbm = "!f() { git rebase -r ${1-"$(git defaultMainBranch)"}; }; f"
	rbmo = "!f() { git plr "$(git defaultMainBranch)"; }; f"
	ri = "!f() { git rebase -i -r ${1-"$(git defaultMainBranch)"}; }; f"
	rih = "!f() { git rebase -i -r HEAD~${1-10}; }; f"
	rcc = rebase --continue
	ra = rebase --abort
	rss = rebase --skip

	p = push 
	pu = "!f() { remote_name=$(if [ -z $1 ]; then printf $(git currentBranch); else printf "$(git currentBranch):${1}"; fi;); git push -u origin $remote_name; }; f"
	puf = "!f() { remote_name=$(if [ -z $1 ]; then printf $(git currentBranch); else printf "$(git currentBranch):${1}"; fi;); git push --force-with-lease -u origin $remote_name; }; f"
	pf = push --force-with-lease

	pl = pull 
	#plm = fetch origin master:master
	plm = "!f() { branch=$(git currentBranch); git fo; git bm; git pl; deletedBranches=$(git bclean); echo $deletedBranches; echo $deletedBranches | grep -q -v $branch && git checkout $branch;}; f"
	plr = "!f() { git pull origin $1 --rebase; }; f"

	c = commit 
	ca = commit --amend
	caa = commit -a --amend -C HEAD
	caf = "!f() { git add -A && git commit --fixup :/$1; }; f"
	cam = "!f() { msg="$*"; git add -A && echo $(git validateCommitMsgLength $msg) | grep -v '^$'; echo \"$(git lookForTypos $msg)\" | grep -v '^$'; git commit -m \"$(git formatCommitMsg $msg)\"; }; f"
	cf = "!f() { git commit --fixup :/$1; }; f"
	cfh = "!f() { git commit --fixup $1; }; f"
	cmbase = "!f() { msg="$*"; echo $(git validateCommitMsgLength $msg) | grep -v '^$'; echo \"$(git lookForTypos $msg)\" | grep -v '^$'; git commit -m \"$(git formatCommitMsg $msg)\"; }; f"

  cm="!f() {  msg="$(git upcasefirstchar $*)"; git cmbase "\"feat: $msg\""; }; f"
  cmf="!f() { msg="$*"; git cmbase "\"fix: $msg\""; }; f"
  cmr="!f() { msg="$*"; git cmbase "\"refactor: $msg\""; }; f"
  cmc="!f() { msg="$*"; git cmbase "\"chore: $msg\""; }; f"
  cmt="!f() { msg="$*"; git cmbase "\"test: $msg\""; }; f"
  cmconfig="!f() { msg="$*"; git cmbase "\"config: $msg\""; }; f"

  cmwip="!f() { git aa && git cmbase "wip"; }; f"

	cp = "!f() { git cherry-pick :/$1; }; f"
	cph = "!f() { git cherry-pick $1; }; f"
	cpabl = "!f() { git allCommitsHashesFromBranchSinceLastMerge ${1-$(git gfuzb)} | xargs git  cherry-pick; }; f" # cherry pick all commits from given branch
	cpabo = "!f() { git allCommitsHashesFromBranchSinceLastMerge ${1-$(git gfuzbo)} | xargs git  cherry-pick; }; f" # cherry pick all commits from given origin branch
	cpah = "!f() { git log $1..${2-$(git currentBranch)} --reverse --pretty=format:'%h' | xargs git  cherry-pick; }; f" # cherry pick all commits after given commit hash
	cpc = cherry-pick --continue
	cpa = cherry-pick --abort
	cps = cherry-pick --skip
  # cherry-pick specifired commits from this branch after hard restting to proivded one ($1 -> branch name $2 -> number of cherry-picked commits)
  rhcp ="!f() { branchName="$(git currentBranch)" && newbranchName="tmp-$(git currentBranch)" && git chb $newbranchName && git checkout $branchName && git reset --hard $1 &&  git cherry-pick $newbranchName~$2..$newbranchName && git branch -D $newbranchName; }; f"

	sl = stash list --color=always --pretty=format:'%gd %C(yellow)%h %>(14)%C(green)%cr %C(blue)%gs'
	sa = stash apply
	sap = checkout -p stash
	ss = "!f() { git stash save "$@" --include-untracked; }; f"
	sh = stash show
	sha = stash show -p
	srm = "!f() { for i in ${@-0}; do git stash drop $i; done; }; f"
	srmall = "!f() { for ((i=$(( $(git scount)-1)); i>=0; i--)); do git stash drop $i; done; }; f"
	scount=!git rev-list --walk-reflogs --count refs/stash

	# ignoring files
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	ignored = ! git ls-files -v | grep '^[[:lower:]]'
	assumed = ignored
	unassumeall = !git assumed | xargs git update-index --no-assume-unchanged	

	# resets
	r = reset
	rs = !git gfuzs git restore --staged
	rp = ! git gfuzs git reset -p
	rpa = reset -p
	rc = "!f() { git reset HEAD~$1 ; }; f"
	rh = ! git reset --hard & git clean -df
  rhc = "!f() { git reset HEAD~$1 --hard & git clean -df ; }; f"
  rhb = "!f() { branch=$(git gfuzb) && git reset --hard $branch &&  git clean -df; }; f"
  rho = "!f() { git fo; git reset --hard origin/$(git currentBranch) & git clean -df ; }; f"

	lastMergeHash = "! f() { git log ${1-$(git currentBranch)} --merges --pretty=format:'%h' | head -n1; }; f"
	allCommitsHashesFromBranchSinceLastMerge = "! f() { branch=${1-$(git currentBranch)}; git log $(git lastMergeHash $branch)..$branch --pretty=format:'%h'; }; f"
	# scripts
	aliases = "!git config -l | grep alias | cut -c 7-"
	currentBranch= branch --show-current
	validateCommitMsgLength = "! f() { msg="$*"; max_length=72; msg_length=${#msg}; [ $msg_length -gt $max_length ] && echo $(printf "%0.s${BLUE}-" {1..50} && echo "${RED}${BOLD} ⛔️⛔️⛔️⛔️⛔️ COMMIT MSG IS TOO LONG ⛔️⛔️⛔️⛔️⛔️ by $(($msg_length-$max_length)) characters" && printf "%0.s${BLUE}-${NO_COLOR}" {1..50}); }; f"
	# requires aspell formula from brew
	# Set LOCAL_ASPELL_DIC env variable with a custom dictionary to support project's specific domain without errors :)
	lookForTypos = "! f() { msg="$*";  if [[ ! -z ${LOCAL_ASPELL_DIC} ]]; then typos=$"(echo $msg | aspell list --extra-dicts="$LOCAL_ASPELL_DIC")"; else typos=$"(echo $msg | aspell list)"; fi; [[ ! -z "$typos" ]] && echo $(printf "%.s${YELLOW}-" {1..50} && echo "⚠️ ⚠️ ⚠️ ⚠️ ⚠️  ${RED}${BOLD}THERE ARE TYPOS IN ${GREEN}${BOLD}$typos ⚠️ ⚠️ ⚠️ ⚠️ ⚠️ " && printf "%.s${YELLOW}-${NO_COLOR}" {1..50}) && echo \"${LIGHT_MAGENTA}${BOLD}$(git listAspellTyposWithSuggestions "$typos")${NO_COLOR}\"; }; f"
  formatCommitMsg = "! f() { msg="$*"; regex=\"(\\[.*\\] )(.*)\"; if [[ $msg =~ $regex ]]; then echo "${BASH_REMATCH[1]} $(git upcaseFirstChar ${BASH_REMATCH[2]})"; else echo $(git upcaseFirstChar $msg); fi; }; f"

  formatCommitMsg = "!f() {\
    msg="$*";\
    regex=\"(\\[.*\\] )(.*)\";\
    if [[ $msg =~ $regex ]]; then\
    echo "${BASH_REMATCH[1]}$(git upcaseFirstChar ${BASH_REMATCH[2]})";\
    else\
    echo \"$(git upcaseFirstChar \"$msg\")\";\
    fi;\
    }; f"

  ; either capitalize first letter of string or if there is a : sign than capitalize first letter after : sign
  formatCommitMsg = "!f() { msg=\"$*\"; if [[ \"$msg\" =~ : ]]; then echo \"$msg\" | awk -F ': ' '{ print $1 \": \" toupper(substr($2,1,1)) tolower(substr($2,2)); }'; else echo \"$msg\" | awk '{ print toupper(substr($0,1,1)) tolower(substr($0,2)); }'; fi; }; f"









	listAspellTyposWithSuggestions = "! f() { echo "$*" | aspell pipe | sed '/^@.*/d' | sed '/*/d' | tr '&' '\n' | grep -v '^$';  }; f"
	upcaseFirstChar = "! f() { echo "$*" | gsed 's/./\\U&/'; }; f"
	
	# requires fzf formula from brew
	gfuza=! git ls-files -m -o --exclude-standard | fzf --print0 -m -1 | xargs -0 -t -o # files ready to be staged with fuzzy search
	gfuzm=! git ls-files -m --exclude-standard | fzf --print0 -m -1 | xargs -0 -t -o # modified ready to be staged with fuzzy search
	gfuzu=! git ls-files -o --exclude-standard | fzf --print0 -m -1 | xargs -0 -t -o # untracked files ready to be staged with fuzzy search
	gfuzs=! git diff --name-only --cached | fzf --print0 -m -1 | xargs -0 -t -o # staged files with fuzzy search
	gfuzb=! git branch | fzf --print0 -m -1 | xargs -0 -t -o # branches with fuzzy search
	gfuzbo=! git fo && git branch -r | fzf --print0 -m -1 | xargs -0 -t -o # remote branches with fuzzy search

  # git
  defaultMainBranch="! f() { [[ ! -z ${DEFAULT__GIT_MAIN_BRANCH+z} ]] && echo "$DEFAULT__GIT_MAIN_BRANCH" || echo "master";}; f"
  checkIfSystemIsInDarkMode="! f() { echo $(defaults read -g AppleInterfaceStyle);}; f"
#   convertToDashCase = "!f() { text=\"$@\"; converted_string=$(ruby -e \"text=\\\"$text\\\"; puts text.gsub(/([a-z\\d])([A-Z])/, \\\"\\\\1-\\\\2\\\").gsub(/([A-Z])([A-Z][a-z])/, \\\"\\\\1-\\\\2\\\").gsub(/::/, \\\"/\\\").gsub(/\\s+/, \\\"-\\\").downcase\"); echo $converted_string; }; f"
  convertToDashCase="!f() { ruby -e \"text=ARGV.join(' '); puts text.gsub(/[ _]/, '-').gsub(/([a-z])([A-Z])/, '\\\\1-\\\\2').downcase\" \"$@\"; }; f"

